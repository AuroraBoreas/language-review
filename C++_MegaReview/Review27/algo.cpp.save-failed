#include "algo.h"

void TS::algo_permutation_heap(void)
{
    // make heap sort pop
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

    std::make_heap(v.begin(), v.end(), std::greater<>{});
    TS::print("std::make_heap, v-> ", v);

    std::pop_heap(v.begin(), v.end(), std::less<>());
    TS::print("std::pop_heap, v-> ", v);

    v.push_back(42);
    std::push_heap(v.begin(), v.end());
    TS::print("std::push_heap, v-> ", v);

    std::sort_heap(v.begin(), v.end());
    TS::print("std::sort_heap, v-> ", v);

    std::prev_permutation(v.begin(), v.end());
    TS::print("std::prev_permutation, v-> ", v);

    std::next_permutation(v.begin(), v.end());
    TS::print("std::next_permutation, v-> ", v);
}

void TS::algo_permutation_sort(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

    // p s r
    std::partition(v.begin(), v.end(), TS::IsEven());
    TS::print("std::partition, v-> ", v);

    auto it = std::partition_point(v.begin(), v.end(), TS::IsEven());
    TS::oformat("std::partition_point, it-> ");
    (it != std:end(v))
        ? std::cout << *it << std::endl
        : std::cout << "[not found]\n";

    std::partial_sort(v.begin(), v.begin()+3, v.end());
    TS::oformat("std::partial_sort, v-> ", v);

    std::sort(v.begin(), v.end());
    TS::oformat("std::sort, v-> ", v);

    std::random_device rd;
    std::mt19937 mt{rd()};
    std::shuffle(v.begin(), v.end(), mt);
    TS::print("std::shuffle, v-> ", v);

    std::rotate(v.begin(), std::next(v.begin(), 3), v.end());
    TS::print("std::rotate, v-> ", v);

    std::reverse(v.begin(), v.end());
    TS::print("std::reverse, v-> ", v);
}

void TS::algo_structure_changer(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

    const int x(99);
    v.erase(std::remove(v.begin(), v.end(), x), std::end(v));
    TS::print("std::remove, v-> ", v);

    v = {2,1,99,99,99,0,-1,99,1};
    v.erase(std::unique(v.begin(), v.end()), v.end());
    TS::print("std::unique, v-> ", v);
}

void TS::algo_mover(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

    // c m s
    TS::oformat("std::copy, v-> ");
    std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
    TS::newline();

    std::vector<int> l;
    std::copy_backward(v.begin(), v.end(), l.end());
    TS::print("std::copy_backward, l-> ", l);

    std::vector<std::thread> vt;
    vt.emplace_back(TS::func, 1);
    vt.emplace_back(TS::func, 2);
    vt.emplace_back(TS::func, 3);
    std::list<std::thread> lt;
    std::move(vt.begin(), vt.end(), std::back_inserter(lt));
    TS::oformat("std::move, lt-> ");
    for(auto& t : lt) t.join();

    using container = std::vector<std::string>;
    container m{"zhang", "liang"};
    container n{"hello", "world"};
    TS::print("std::swap_ranges, b4, m-> ", m);
    TS::print("std::swap_ranges, b4, n-> ", n);
    std::swap_ranges(m.begin(), m.end(), n.begin());
    TS::print("std::swap_ranges, af, m-> ", m);
    TS::print("std::swap_ranges, af, n-> ", n);
}

void TS::algo_value_modifier(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

}

void TS::algo_set(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

}

void TS::algo_query_property(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

}

void TS::algo_query_value(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

}

void TS::algo_raw_memory(void)
{
    /*
    - uninitialized_default_construct
    - uninitialized_value_construct
    - uninitialized_fill
    - uninitialized_move
    - uninitialized_copy
    */
    TS::oformat("std::raw_memory, -> nothing biggy\n")
}

void TS::algo_secret_rune(void)
{
    /*
    - *_if
    - stable_*
    - *_n
    - is_*, is_*_until
    - *_copy
    */
    TS::oformat("std::secret_rune, -> secret rune\n");
}

void TS::algo_lone_island(void)
{
    std::vector<int> v{2,1,99,99,99,0,-1,99,1};
    TS::print("original, v-> ", v);

    TS::oformat("std::for_each, v-> ");
    std::for_each(v.begin(), v.end(), [](const auto& e){ std::cout << e << " "; });
    TS::newline();

    std::string m("hello zhang liang");
    std::string n;
    std::transform(m.begin(), m.end(), std::back_inserter(n), [](const char& e){ return std::toupper(e); });
    TS::print("std::transform. n-> ", n);
}

