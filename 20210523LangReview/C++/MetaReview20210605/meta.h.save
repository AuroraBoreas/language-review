#ifndef META_H_INCLUDED
#define META_H_INCLUDED

/*
c++, algorithm review

@ZL, 20210605
*/

#pragma once

#include <iostream>
#include <iomanip>
#include <array>
#include <vector>
#include <list>
#include <forward_list>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <functional>
#include <iterator>
#include <numeric>
#include <string>
#include <string_view>
#include <random>
#include <thread>
#include <chrono>

namespace TS
{
    template<class T>
    void print(const std::string& comment, std::vector<T> v);

    template<class T>
    void print(const std::string& comment, std::set<T> s);

    template<typename U>
    void print(const std::string& comment, U result);

    struct A
    {
    private:
        int* ptr;
    public:
        // default ctor
        A()
        {
            std::cout << "default ctor..." << std::endl;
            ptr = new int;
        }
        // ctor
        A(int& i)
        {
            std::cout << "lhs ref ctor..." << std::endl;
            ptr = new int(i);
        }
        // copy ctor
        A(A& a)
        {
            std::cout << "copy ctor..." << std::endl;
            this->ptr = a.ptr;
        }
        // move ctor
        A(A&& a)
        {
            std::cout << "move ctor..." << std::endl;
            this->ptr = a.ptr;
            a.ptr = nullptr;
        }
        // dtor
        ~A()
        {
            std::cout << "dtor..." << std::endl;
        }

    };
	void algo_permutation_heap(void);
	void algo_permutation_sort(void);
	void algo_permutation_partition(void);
	void algo_permutation_other(void);
	void algo_secret_runes(void);

	void algo_queries(void);
	void algo_query_property(void);
	void algo_search_value(void);

	void algo_of_set(void);

	void algo_mover(void);
}

#endif // META_H_INCLUDED
